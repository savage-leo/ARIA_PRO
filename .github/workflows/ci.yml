name: ARIA Pro CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Global environment variables
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  PYTHONPATH: ${{ github.workspace }}
  ARIA_ENV: 'test'
  ARIA_LOG_LEVEL: 'INFO'

# Job to cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast validations that must pass on every PR and push
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 1
    
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci --prefer-offline
    
    - name: Run TypeScript type check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy
    
    - name: Run Python linters
      working-directory: ./backend
      run: |
        flake8 .
        black --check .
        isort --check-only .
        mypy --install-types --non-interactive .

  # Unit tests that should be fast and reliable
  unit-tests:
    name: Unit Tests
    needs: quick-checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install test dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock httpx
    
    - name: Run unit tests with coverage
      working-directory: ./backend
      run: |
        python -m pytest tests/unit/ -v --cov=backend --cov-report=xml --cov-report=term
      env:
        ARIA_ENABLE_MT5: "0"
        RUN_AUTOTRADER_INTEGRATION: "0"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: false

  # Integration tests - only run on main/develop or with [integration] label
  integration-tests:
    name: Integration Tests
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || contains(github.event.pull_request.labels.*.name, 'integration')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install test dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock httpx
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        python -m pytest tests/integration/ -v --cov=backend --cov-append --cov-report=xml --cov-report=term
      env:
        ARIA_ENABLE_MT5: "0"
        RUN_AUTOTRADER_INTEGRATION: "0"
    
    - name: Run monitoring tests
      working-directory: ./backend
      run: |
        python -m pytest backend/tests/test_monitoring_endpoints.py -v

  # Windows-specific tests (if needed)
  windows-tests:
    name: Windows Tests
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: windows-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install test dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock httpx
    
    - name: Run Windows-specific tests
      working-directory: ./backend
      run: |
        python -m pytest tests/windows/ -v
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend && npm ci
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        ARIA_ENABLE_MT5: "0"
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/api/signals/generate -X POST \
          -H "Content-Type: application/json" \
          -d '{"symbol":"EURUSD","timeframe":"M5","bars":100}' || exit 1
        curl -f http://localhost:8000/api/analytics/performance-metrics?days=30 || exit 1

  windows-autotrader-integration:
    runs-on: windows-latest
    needs: [backend-test]
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install backend requirements (Windows)
        working-directory: ./backend
        run: |
          pip install -r requirements.txt

      - name: Verify MetaTrader5 import
        run: |
          python -c "import MetaTrader5 as mt5; print('MetaTrader5 version:', getattr(mt5, '__version__', 'unknown'))"

      - name: Run AutoTrader integration test
        env:
          PYTHONPATH: ${{ github.workspace }}
          RUN_AUTOTRADER_INTEGRATION: '1'
          ARIA_ENABLE_MT5: '1'
        run: |
          python -m pytest backend/tests/test_monitoring_endpoints.py -k integration -q
