name: ARIA Pro CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: TypeScript type check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        ARIA_ENABLE_MT5: "0"
        RUN_AUTOTRADER_INTEGRATION: "0"
        ARIA_LOG_LEVEL: "INFO"

  monitoring-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install minimal Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi httpx pytest pytest-asyncio websockets websocket-client psutil numpy

      - name: Run monitoring tests (isolated)
        env:
          PYTHONPATH: ${{ github.workspace }}
          ARIA_ENABLE_MT5: "0"
          RUN_AUTOTRADER_INTEGRATION: "0"
        run: |
          python -m pytest backend/tests/test_monitoring_endpoints.py -q

  integration-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend && npm ci
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        ARIA_ENABLE_MT5: "0"
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/api/signals/generate -X POST \
          -H "Content-Type: application/json" \
          -d '{"symbol":"EURUSD","timeframe":"M5","bars":100}' || exit 1
        curl -f http://localhost:8000/api/analytics/performance-metrics?days=30 || exit 1

  windows-autotrader-integration:
    runs-on: windows-latest
    needs: [backend-test]
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install backend requirements (Windows)
        working-directory: ./backend
        run: |
          pip install -r requirements.txt

      - name: Verify MetaTrader5 import
        run: |
          python -c "import MetaTrader5 as mt5; print('MetaTrader5 version:', getattr(mt5, '__version__', 'unknown'))"

      - name: Run AutoTrader integration test
        env:
          PYTHONPATH: ${{ github.workspace }}
          RUN_AUTOTRADER_INTEGRATION: '1'
          ARIA_ENABLE_MT5: '1'
        run: |
          python -m pytest backend/tests/test_monitoring_endpoints.py -k integration -q
